# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hd1uNRYmRe3UIc8jI9S9bXB35CXU3rhZ
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile /content/app.py
# import streamlit as st
# import pandas as pd, numpy as np, joblib, json
# 
# st.set_page_config(page_title="Churn Predictor", layout="centered")
# 
# @st.cache_resource
# def load_all():
#     pipe = joblib.load("model_churn_histgb.pkl")
#     with open("features_15.json") as f:
#         feats = json.load(f)
#     return pipe, feats
# 
# pipe, FEATURES_15 = load_all()
# 
# CORE12 = [
#  'tenure','contract','monthly_charges','payment_method','paperless_billing',
#  'internet_service','phone_service','multiple_lines',
#  'online_security','device_protection','premium_tech_support','streaming_tv'
# ]
# ADDON_COLS = ['online_security','device_protection','premium_tech_support','streaming_tv']
# 
# def add_engineered(df: pd.DataFrame) -> pd.DataFrame:
#     df = df.copy()
#     for c in df.columns:
#         if df[c].dtype == 'object':
#             df[c] = df[c].astype(str).str.strip()
#     df['addons_count'] = (df[ADDON_COLS]=='Yes').sum(axis=1).astype(int)
#     df['auto_pay']     = df['payment_method'].isin(
#         ['Bank transfer (automatic)','Credit card (automatic)']).astype(int)
#     df['contract_mtm'] = (df['contract']=='Month-to-Month').astype(int)
#     for c in ['tenure','monthly_charges','addons_count','auto_pay','contract_mtm']:
#         if c in df.columns: df[c] = pd.to_numeric(df[c], errors='coerce')
#     return df
# 
# st.title("ðŸ“‰ Telco Churn Predictor")
# mode = st.sidebar.radio("Mode", ["Single customer", "Batch CSV"])
# 
# if mode=="Single customer":
#     c1, c2 = st.columns(2)
#     with c1:
#         tenure = st.number_input("Tenure (months)", 0, 120, 12)
#         monthly_charges = st.number_input("Monthly charges", 0.0, 500.0, 70.0, step=0.1)
#         contract = st.selectbox("Contract", ["Month-to-Month","One year","Two year"])
#         payment_method = st.selectbox("Payment method", [
#             "Electronic check","Mailed check","Bank transfer (automatic)","Credit card (automatic)"])
#         paperless_billing = st.selectbox("Paperless billing", ["Yes","No"])
#         internet_service  = st.selectbox("Internet service", ["DSL","Fiber optic","No"])
#     with c2:
#         phone_service     = st.selectbox("Phone service", ["Yes","No"])
#         multiple_lines    = st.selectbox("Multiple lines", ["Yes","No"])
#         online_security   = st.selectbox("Online security", ["Yes","No"])
#         device_protection = st.selectbox("Device protection", ["Yes","No"])
#         premium_tech_support = st.selectbox("Premium tech support", ["Yes","No"])
#         streaming_tv      = st.selectbox("Streaming TV", ["Yes","No"])
# 
#     row = pd.DataFrame([{
#         'tenure':tenure,'monthly_charges':monthly_charges,'contract':contract,
#         'payment_method':payment_method,'paperless_billing':paperless_billing,
#         'internet_service':internet_service,'phone_service':phone_service,
#         'multiple_lines':multiple_lines,'online_security':online_security,
#         'device_protection':device_protection,'premium_tech_support':premium_tech_support,
#         'streaming_tv':streaming_tv
#     }])
#     feats = add_engineered(row)[FEATURES_15]
#     th = st.slider("Decision threshold", 0.05, 0.90, 0.35, 0.01)
#     if st.button("Predict"):
#         p = float(pipe.predict_proba(feats)[:,1][0])
#         st.metric("Churn probability", f"{p:.3f}")
#         st.write("Prediction:", "**Churn**" if p>=th else "**Stay**", f"(threshold {th:.2f})")
# else:
#     st.subheader("Batch scoring (CSV)")
#     st.markdown("Kolom minimal: `tenure, contract, monthly_charges, payment_method, paperless_billing, "
#                 "internet_service, phone_service, multiple_lines, online_security, device_protection, "
#                 "premium_tech_support, streaming_tv`")
#     file = st.file_uploader("Upload CSV", type="csv")
#     topk = st.slider("Top-K (%)", 5, 30, 10, 1)
#     th = st.slider("Threshold (opsional)", 0.05, 0.90, 0.35, 0.01)
#     if file is not None:
#         raw = pd.read_csv(file)
#         id_col = 'customer_id' if 'customer_id' in raw.columns else None
#         missing = [c for c in CORE12 if c not in raw.columns]
#         if missing:
#             st.error(f"Kolom wajib hilang: {missing}")
#         else:
#             feats = add_engineered(raw)[FEATURES_15]
#             score = pipe.predict_proba(feats)[:,1]
#             out = pd.DataFrame({'score': score, 'label_pred': (score>=th).astype(int)})
#             if id_col: out[id_col] = raw[id_col].values
#             out = out.sort_values('score', ascending=False)
#             k = int(np.ceil(len(out)*topk/100))
#             st.write(f"Top-{topk}% (n={k})"); st.dataframe(out.head(k))
#             st.download_button("Download scores", data=out.to_csv(index=False).encode('utf-8'),
#                                file_name="scores_churn.csv", mime="text/csv")
#